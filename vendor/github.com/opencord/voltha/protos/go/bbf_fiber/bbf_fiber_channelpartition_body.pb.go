// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bbf_fiber_channelpartition_body.proto

package bbf_fiber

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChannelpartitionConfigData struct {
	ChannelgroupRef           string         `protobuf:"bytes,1,opt,name=channelgroup_ref,json=channelgroupRef,proto3" json:"channelgroup_ref,omitempty"`
	FecDownstream             bool           `protobuf:"varint,2,opt,name=fec_downstream,json=fecDownstream,proto3" json:"fec_downstream,omitempty"`
	ClosestOntDistance        uint32         `protobuf:"varint,3,opt,name=closest_ont_distance,json=closestOntDistance,proto3" json:"closest_ont_distance,omitempty"`
	DifferentialFiberDistance uint32         `protobuf:"varint,4,opt,name=differential_fiber_distance,json=differentialFiberDistance,proto3" json:"differential_fiber_distance,omitempty"`
	AuthenticationMethod      AuthMethodType `protobuf:"varint,5,opt,name=authentication_method,json=authenticationMethod,proto3,enum=bbf_fiber_types.AuthMethodType" json:"authentication_method,omitempty"`
	MulticastAesIndicator     bool           `protobuf:"varint,7,opt,name=multicast_aes_indicator,json=multicastAesIndicator,proto3" json:"multicast_aes_indicator,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}       `json:"-"`
	XXX_unrecognized          []byte         `json:"-"`
	XXX_sizecache             int32          `json:"-"`
}

func (m *ChannelpartitionConfigData) Reset()         { *m = ChannelpartitionConfigData{} }
func (m *ChannelpartitionConfigData) String() string { return proto.CompactTextString(m) }
func (*ChannelpartitionConfigData) ProtoMessage()    {}
func (*ChannelpartitionConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9658ec8542937bf2, []int{0}
}

func (m *ChannelpartitionConfigData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelpartitionConfigData.Unmarshal(m, b)
}
func (m *ChannelpartitionConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelpartitionConfigData.Marshal(b, m, deterministic)
}
func (m *ChannelpartitionConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelpartitionConfigData.Merge(m, src)
}
func (m *ChannelpartitionConfigData) XXX_Size() int {
	return xxx_messageInfo_ChannelpartitionConfigData.Size(m)
}
func (m *ChannelpartitionConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelpartitionConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelpartitionConfigData proto.InternalMessageInfo

func (m *ChannelpartitionConfigData) GetChannelgroupRef() string {
	if m != nil {
		return m.ChannelgroupRef
	}
	return ""
}

func (m *ChannelpartitionConfigData) GetFecDownstream() bool {
	if m != nil {
		return m.FecDownstream
	}
	return false
}

func (m *ChannelpartitionConfigData) GetClosestOntDistance() uint32 {
	if m != nil {
		return m.ClosestOntDistance
	}
	return 0
}

func (m *ChannelpartitionConfigData) GetDifferentialFiberDistance() uint32 {
	if m != nil {
		return m.DifferentialFiberDistance
	}
	return 0
}

func (m *ChannelpartitionConfigData) GetAuthenticationMethod() AuthMethodType {
	if m != nil {
		return m.AuthenticationMethod
	}
	return AuthMethodType_SERIAL_NUMBER
}

func (m *ChannelpartitionConfigData) GetMulticastAesIndicator() bool {
	if m != nil {
		return m.MulticastAesIndicator
	}
	return false
}

func init() {
	proto.RegisterType((*ChannelpartitionConfigData)(nil), "bbf_fiber.ChannelpartitionConfigData")
}

func init() {
	proto.RegisterFile("bbf_fiber_channelpartition_body.proto", fileDescriptor_9658ec8542937bf2)
}

var fileDescriptor_9658ec8542937bf2 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0x86, 0x91, 0xfb, 0xe9, 0x05, 0xbb, 0x45, 0xd8, 0x54, 0x75, 0x0f, 0x15, 0x05, 0x83, 0x7a,
	0x91, 0x4c, 0x0b, 0x3d, 0x16, 0x1c, 0x9b, 0x40, 0x0e, 0x21, 0x20, 0x7c, 0xca, 0x65, 0x59, 0xad,
	0x66, 0xa5, 0x05, 0x69, 0x47, 0xec, 0x8e, 0x12, 0xfc, 0xa7, 0xf3, 0x1b, 0x82, 0x64, 0x45, 0x71,
	0x7c, 0x7d, 0x9f, 0xe7, 0x1d, 0x76, 0x66, 0xd9, 0x3a, 0xcb, 0x14, 0x57, 0x3a, 0x03, 0xcb, 0x65,
	0x29, 0x8c, 0x81, 0xaa, 0x11, 0x96, 0x34, 0x69, 0x34, 0x3c, 0xc3, 0xfc, 0x18, 0x37, 0x16, 0x09,
	0xfd, 0xe9, 0xa8, 0xad, 0x96, 0xaf, 0x0d, 0x3a, 0x36, 0xe0, 0x4e, 0xc6, 0xaf, 0xa7, 0x09, 0x5b,
	0xed, 0x2e, 0x26, 0xec, 0xd0, 0x28, 0x5d, 0xec, 0x05, 0x09, 0xff, 0x37, 0xfb, 0x3a, 0xcc, 0x2f,
	0x2c, 0xb6, 0x0d, 0xb7, 0xa0, 0x02, 0x2f, 0xf4, 0xa2, 0x69, 0xfa, 0xe5, 0x3c, 0x4f, 0x41, 0xf9,
	0x6b, 0x36, 0x57, 0x20, 0x79, 0x8e, 0x8f, 0xc6, 0x91, 0x05, 0x51, 0x07, 0x93, 0xd0, 0x8b, 0x3e,
	0xa7, 0x33, 0x05, 0x72, 0x3f, 0x86, 0xfe, 0x86, 0x2d, 0x64, 0x85, 0x0e, 0x1c, 0x71, 0x34, 0xc4,
	0x73, 0xed, 0x48, 0x18, 0x09, 0xc1, 0xbb, 0xd0, 0x8b, 0x66, 0xa9, 0x3f, 0xb0, 0x3b, 0x43, 0xfb,
	0x81, 0xf8, 0xff, 0xd9, 0x8f, 0x5c, 0x2b, 0x05, 0x16, 0x0c, 0x69, 0x51, 0x0d, 0x4b, 0x8c, 0xc5,
	0xf7, 0x7d, 0xf1, 0xfb, 0xb9, 0x72, 0xdd, 0x19, 0x63, 0xff, 0xc0, 0x96, 0xa2, 0xa5, 0xb2, 0x43,
	0x52, 0xf4, 0x17, 0xaa, 0x81, 0x4a, 0xcc, 0x83, 0x0f, 0xa1, 0x17, 0xcd, 0xff, 0xfc, 0x8c, 0x2f,
	0x2f, 0xb3, 0x6d, 0xa9, 0xbc, 0xed, 0x95, 0xc3, 0xb1, 0x81, 0x74, 0xf1, 0xb6, 0x7d, 0x22, 0xfe,
	0x3f, 0xf6, 0xad, 0x6e, 0xab, 0x2e, 0x74, 0xc4, 0x05, 0x38, 0xae, 0x4d, 0xde, 0x19, 0x68, 0x83,
	0x4f, 0xfd, 0xde, 0xcb, 0x11, 0x6f, 0xc1, 0xdd, 0xbc, 0xc0, 0xab, 0xcd, 0x7d, 0x5c, 0x68, 0x2a,
	0xdb, 0x2c, 0x96, 0x58, 0x27, 0xd8, 0x80, 0x91, 0x68, 0xf3, 0xe4, 0x01, 0x2b, 0x2a, 0x45, 0xd2,
	0x7f, 0x8a, 0x4b, 0x0a, 0x4c, 0xc6, 0x47, 0x65, 0x1f, 0xfb, 0xf0, 0xef, 0x73, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x04, 0x35, 0x8f, 0x0a, 0xf4, 0x01, 0x00, 0x00,
}
